import os
from airflow import DAG
from airflow.operators.bash import BashOperator
from datetime import datetime, timedelta

# DÃ©finition des arguments par dÃ©faut pour le DAG
default_args = {
    "owner": "etienneeskinazi",
    "depends_on_past": False,
    "start_date": datetime(2025, 2, 18),
    "retries": 1,
    "retry_delay": timedelta(minutes=5),
}

# ğŸ“Œ RÃ©cupÃ©ration automatique des chemins :
# Chemin du dossier contenant ce DAG --> renvoie : .../ESKINAZI_Etienne_NAJI_Ramzi_projet_BGD_airflow/dags
dag_folder = os.path.dirname(os.path.realpath(__file__))

# Chemin vers le dossier des scripts Bash --> renvoie : .../ESKINAZI_Etienne_NAJI_Ramzi_projet_BGD_airflow/extract_data_scripts
scripts_path = os.path.abspath(os.path.join(dag_folder, "..", "extract_data_scripts"))

# Chemin complet du script Bash --> renvoie : .../ESKINAZI_Etienne_NAJI_Ramzi_projet_BGD_airflow/extract_data_scripts/get_btc_realtime.sh
bash_script_path = os.path.join(scripts_path, "get_btc_realtime.sh")

# Racine du projet --> renvoie : .../ESKINAZI_Etienne_NAJI_Ramzi_projet_BGD_airflow
project_root = os.path.abspath(os.path.join(dag_folder, ".."))

# ğŸ“Œ DÃ©finition du DAG Airflow
with DAG(
    dag_id="dag3_btc_realtime",   # Nom du DAG
    default_args=default_args,  
    schedule_interval=None,     #
    catchup=False,             # Pas de rattrapage si une exÃ©cution est manquÃ©e
    max_active_runs=1          # Une seule instance active Ã  la fois pour Ã©viter les conflits
) as dag:

    # ğŸ“Œ DÃ©finition de la tÃ¢che BashOperator pour rÃ©cupÃ©rer les donnÃ©es BTC en temps rÃ©el
    fetch_btc_realtime = BashOperator(
        task_id="get_btc_realtime",  
        bash_command=f"bash {bash_script_path} {project_root}",  # ğŸ“Œ ExÃ©cution du script avec le chemin absolu
    )

    fetch_btc_realtime
